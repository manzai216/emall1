<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.web.emall.mappers.ReputationMapper">
    <resultMap id="BaseResultMap" type="org.web.emall.models.Reputation">
        <result column="amount" jdbcType="DOUBLE" property="amount"/>
        <result column="date_reputation" jdbcType="TIMESTAMP" property="dateReputation"/>
        <result column="good_reputation" jdbcType="INTEGER" property="goodReputation"/>
        <result column="good_reputation_remark" jdbcType="VARCHAR" property="goodReputationRemark"/>
        <result column="good_reputation_str" jdbcType="VARCHAR" property="goodReputationStr"/>
        <result column="number" jdbcType="INTEGER" property="number"/>
        <result column="order_id" jdbcType="INTEGER" property="orderId"/>
        <result column="pic" jdbcType="VARCHAR" property="pic"/>
        <result column="uid" jdbcType="INTEGER" property="uid"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="goods_id" jdbcType="INTEGER" property="goodsId"/>
        <result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
    </resultMap>

    <select id="selectReputationByFoodId" resultMap="BaseResultMap" parameterType="int">
          SELECT
            f.`min_price` amount,
            f.`pic` pic,
            f.`name` goods_name,
            r.*
          FROM
            reputation r
          JOIN Food f
          ON r.`goods_id` = f.`id`
          AND r.`goods_id` = #{goods_id}
    </select>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    amount, date_reputation, good_reputation, good_reputation_remark, good_reputation_str, 
    number, order_id, pic, uid, user_id, goods_id, goods_name
  </sql>
    <select id="selectByExample" parameterType="org.web.emall.models.ReputationExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from reputation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="org.web.emall.models.ReputationExample">
        delete from reputation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="org.web.emall.models.Reputation">
    insert into reputation (amount, date_reputation, good_reputation, 
      good_reputation_remark, good_reputation_str, 
      number, order_id, pic, 
      uid, user_id, goods_id, 
      goods_name)
    values (#{amount,jdbcType=DOUBLE}, #{dateReputation,jdbcType=TIMESTAMP}, #{goodReputation,jdbcType=INTEGER}, 
      #{goodReputationRemark,jdbcType=VARCHAR}, #{goodReputationStr,jdbcType=VARCHAR}, 
      #{number,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{pic,jdbcType=VARCHAR}, 
      #{uid,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{goodsId,jdbcType=INTEGER}, 
      #{goodsName,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="org.web.emall.models.Reputation">
        insert into reputation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="amount != null">
                amount,
            </if>
            <if test="dateReputation != null">
                date_reputation,
            </if>
            <if test="goodReputation != null">
                good_reputation,
            </if>
            <if test="goodReputationRemark != null">
                good_reputation_remark,
            </if>
            <if test="goodReputationStr != null">
                good_reputation_str,
            </if>
            <if test="number != null">
                number,
            </if>
            <if test="orderId != null">
                order_id,
            </if>
            <if test="pic != null">
                pic,
            </if>
            <if test="uid != null">
                uid,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="goodsId != null">
                goods_id,
            </if>
            <if test="goodsName != null">
                goods_name,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="amount != null">
                #{amount,jdbcType=DOUBLE},
            </if>
            <if test="dateReputation != null">
                #{dateReputation,jdbcType=TIMESTAMP},
            </if>
            <if test="goodReputation != null">
                #{goodReputation,jdbcType=INTEGER},
            </if>
            <if test="goodReputationRemark != null">
                #{goodReputationRemark,jdbcType=VARCHAR},
            </if>
            <if test="goodReputationStr != null">
                #{goodReputationStr,jdbcType=VARCHAR},
            </if>
            <if test="number != null">
                #{number,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                #{orderId,jdbcType=INTEGER},
            </if>
            <if test="pic != null">
                #{pic,jdbcType=VARCHAR},
            </if>
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="goodsId != null">
                #{goodsId,jdbcType=INTEGER},
            </if>
            <if test="goodsName != null">
                #{goodsName,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="org.web.emall.models.ReputationExample" resultType="java.lang.Long">
        select count(*) from reputation
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update reputation
        <set>
            <if test="record.amount != null">
                amount = #{record.amount,jdbcType=DOUBLE},
            </if>
            <if test="record.dateReputation != null">
                date_reputation = #{record.dateReputation,jdbcType=TIMESTAMP},
            </if>
            <if test="record.goodReputation != null">
                good_reputation = #{record.goodReputation,jdbcType=INTEGER},
            </if>
            <if test="record.goodReputationRemark != null">
                good_reputation_remark = #{record.goodReputationRemark,jdbcType=VARCHAR},
            </if>
            <if test="record.goodReputationStr != null">
                good_reputation_str = #{record.goodReputationStr,jdbcType=VARCHAR},
            </if>
            <if test="record.number != null">
                number = #{record.number,jdbcType=INTEGER},
            </if>
            <if test="record.orderId != null">
                order_id = #{record.orderId,jdbcType=INTEGER},
            </if>
            <if test="record.pic != null">
                pic = #{record.pic,jdbcType=VARCHAR},
            </if>
            <if test="record.uid != null">
                uid = #{record.uid,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.goodsId != null">
                goods_id = #{record.goodsId,jdbcType=INTEGER},
            </if>
            <if test="record.goodsName != null">
                goods_name = #{record.goodsName,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update reputation
        set amount = #{record.amount,jdbcType=DOUBLE},
        date_reputation = #{record.dateReputation,jdbcType=TIMESTAMP},
        good_reputation = #{record.goodReputation,jdbcType=INTEGER},
        good_reputation_remark = #{record.goodReputationRemark,jdbcType=VARCHAR},
        good_reputation_str = #{record.goodReputationStr,jdbcType=VARCHAR},
        number = #{record.number,jdbcType=INTEGER},
        order_id = #{record.orderId,jdbcType=INTEGER},
        pic = #{record.pic,jdbcType=VARCHAR},
        uid = #{record.uid,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        goods_id = #{record.goodsId,jdbcType=INTEGER},
        goods_name = #{record.goodsName,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
</mapper>